// <auto-generated />
using System;
using Database.Model.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Database.Migrations
{
    [DbContext(typeof(SqlModel))]
    partial class SqlModelModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.8");

            modelBuilder.Entity("Database.Model.Database.Tables.Availability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("BuyCost")
                        .HasColumnType("REAL");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<double>("DeliverCost")
                        .HasColumnType("REAL");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("SellCost")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("ProductId", "ProfileId")
                        .IsUnique();

                    b.ToTable("Availability");
                });

            modelBuilder.Entity("Database.Model.Database.Tables.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Database.Model.Database.Tables.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Car")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Database.Model.Database.Tables.Deliver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Delivers");
                });

            modelBuilder.Entity("Database.Model.Database.Tables.DeliverProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeliverId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeliverId");

                    b.HasIndex("ProductId");

                    b.ToTable("DeliversProducts");
                });

            modelBuilder.Entity("Database.Model.Database.Tables.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CurrentCost")
                        .HasColumnType("REAL");

                    b.Property<int>("CurrentCount")
                        .HasColumnType("INTEGER");

                    b.Property<double>("DeliverCost")
                        .HasColumnType("REAL");

                    b.Property<int>("DeliverId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("OrderCost")
                        .HasColumnType("REAL");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("SummCost")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("DeliverId");

                    b.HasIndex("ProductId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Database.Model.Database.Tables.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("DeliverCost")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("OrderCost")
                        .HasColumnType("REAL");

                    b.Property<double>("SellCost")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Database.Model.Database.Tables.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Database.Model.Database.Tables.Sell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CardId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Profit")
                        .HasColumnType("REAL");

                    b.Property<string>("SellDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProductId");

                    b.ToTable("Sells");
                });

            modelBuilder.Entity("Database.Model.Database.Tables.Availability", b =>
                {
                    b.HasOne("Database.Model.Database.Tables.Product", "Product")
                        .WithMany("Availabilities")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Model.Database.Tables.Profile", "Profile")
                        .WithMany("Availabilities")
                        .HasForeignKey("ProfileId");

                    b.Navigation("Product");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Database.Model.Database.Tables.DeliverProduct", b =>
                {
                    b.HasOne("Database.Model.Database.Tables.Deliver", "Deliver")
                        .WithMany("DeliverProducts")
                        .HasForeignKey("DeliverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Model.Database.Tables.Product", "Product")
                        .WithMany("DeliverProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deliver");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Database.Model.Database.Tables.Order", b =>
                {
                    b.HasOne("Database.Model.Database.Tables.Deliver", "Deliver")
                        .WithMany("Orders")
                        .HasForeignKey("DeliverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Model.Database.Tables.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deliver");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Database.Model.Database.Tables.Sell", b =>
                {
                    b.HasOne("Database.Model.Database.Tables.Card", "Card")
                        .WithMany("Sells")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Model.Database.Tables.Client", "Client")
                        .WithMany("Sells")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Model.Database.Tables.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Client");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Database.Model.Database.Tables.Card", b =>
                {
                    b.Navigation("Sells");
                });

            modelBuilder.Entity("Database.Model.Database.Tables.Client", b =>
                {
                    b.Navigation("Sells");
                });

            modelBuilder.Entity("Database.Model.Database.Tables.Deliver", b =>
                {
                    b.Navigation("DeliverProducts");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Database.Model.Database.Tables.Product", b =>
                {
                    b.Navigation("Availabilities");

                    b.Navigation("DeliverProducts");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Database.Model.Database.Tables.Profile", b =>
                {
                    b.Navigation("Availabilities");
                });
#pragma warning restore 612, 618
        }
    }
}
